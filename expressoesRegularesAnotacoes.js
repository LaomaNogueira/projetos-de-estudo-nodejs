//BIBLIOGRAFIA: https://aurelio.net/regex/


//EXPRESS√ïES REGULARES = LINGUAGEM DE BUSCA DE PADR√îES


/*FORMAS DE DECLARAR EXPRESS√ïES REGULARES:
    1 - Chamando o construtor(menos usada):
        var construtor = new RegExp('padr√£o, 'flag'); //O construtor RegExp cria um objeto de express√£o regular para realizar uma correspond√™ncia de texto com um padr√£o.
                OU
    2 - Na forma literal(mais utilizado):
        var literal = /padrao/flag;
    Onde:
        Primeiro argumento: √© o padr√£o, pode ser qq coisa, mas por bom uso deve ser uma string ou outra regex
        Segundo argumento: √© a flag ou modificador, adiciona um comportamento no motor da Regex
*/


/*FLAGS - MODIFICADORES do JS:
    g - pesquisa global, a busca deve retornar todos os padr√µes encontrados. 
        Caso n√£o seja usado, ser√° retornado apenas o primeiro padr√£o encontrado.
    i - case insensitive, n√£o diferencia mai√∫sculas e min√∫sculas
    m - pesquisa multi-linhas, procura o padr√£o em m√∫ltiplas linhas
        retorna verdadeiro caso uma linha corresponda ao padr√£o
    y - for√ßa a regex a trazer somente os matches consecutivos, ou seja, 
        se voc√™ tem um alvo que tem 2 resultados consecutivos e em seguida um caractere 
        (ou conjunto) que n√£o bate com seu padr√£o, ele s√≥ traz os primeiros resultados.
    s - Permite que o caractere . corresponda tamb√©m √† quebra da linha.
    u - Habilita a capacidade da Regex engine entender caracteres unicode 
        e captura-los corretamente (exemplo: ùåÜ), busca emojis por exemplo.
*/


/*M√âTODOS:
    variavelPattern.metodo(variavelAlvo);

    M√©todos RegExp:
        test - valida se o alvo cont√©m o padr√£o que voc√™ definiu, retorna: true ou false.
        exec - utilizar quando precisa recuperar o padr√£o que est√° filtrando, 
               a cada vez que voc√™ executa o m√©todo, ele pula para o pr√≥ximo resultado
               Retorna null ou um array: ['[index] - resultado encontrado', 
                                          'index - posi√ß√£o do resultado', 
                                          'input - entrada naquele momento']
    M√©todos String:
        match - executa uma pesquisa por uma correspond√™ncia na string. 
                Retorna um array de informa√ß√µes ou null caso n√£o haja correspond√™ncia
        search - testa uma correspond√™ncia na string. 
                 Retorna o indice da correspond√™ncia ou -1 se o teste falhar
        replace - executa uma pesquisa por uma correspond√™ncia na string, 
                  e substitui a substring correspondente, por uma substring de substitui√ß√£o.
        split - usa uma express√£o regular ou uma string fixa para quebrar uma string 
                dentro de um array de substrings.

*/  


/*CARACTERES ESPECIAIS ou META CARACTERES:
    / - INICIO E FIM DA REGEX. Come√ßa e termina uma express√£o regular.
    \ - CARACTER DE ESCAPE. Uma \ que preceda um caractere n√£o especial, significa que o 
        caractere seguinte √© especial e n√£o deve ser interpretado de forma literal
        Quando a \ preceder um caractere especial isso significar√° 
        que o pr√≥ximo caractere deve ser interpretado de forma literal. 
        N√£o √© necess√°rio "escapar" caracteres especiais em conjuntos, dentro de colchetes[].
    . - CORINGA. Corresponde √† qualquer caractere, exceto quebra de linha. Para corresponder 
        especificamente a um ponto, √© necess√°rio escapar este caractere, assim: \.
    ^ - INICIO. Valida se uma string come√ßa com um determinado padr√£o. Tamb√©m serve para negar um grupo.
    $ - FIM. Valida se uma string termina com um determinado padr√£o.
    [] - CONJUNTO DE CARACTERES. Pesquisa correspond√™ncia para qualquer um dos caracteres entre colchetes.
         Use h√≠fen para especificar um intervalo de caracteres. Ex: [a-d] = [abcd].
         Exs: /[1238]/ , /[0-9]/ , /[afghj]/ , /[a-z]/ , /[A-Z]/ , /[0-9a-zA-Z]/
    [^conjunto] - NEGAR CONJUNTO. Quando  o circunflexo √© utilizado dentro de conjuntos, tem a fun√ß√£o de negar aquele conjunto.
    {} - DEFINE UMA PROPRIEDADE. Operador de precis√£o
    () - DEFINE UM GRUPO. Cria grupos de padr√µes
    (?:xyz) - IGNORA UM GRUPO.√â poss√≠vel usando a sintaxe ?: dentro do inicio do grupo (?: ... )
    \d - NUM√âRICO. Corresponde √† um caractere num√©rico. 
         √â o mesmo que [0-9]
    \D - N√ÉO-NUM√âRICO. Corresponde √† um caractere n√£o num√©rico. 
         √â o mesmo que [^0-9].
    \w - ALFANUM√âRICO. Corresponde √† qualquer caractere alfanum√©rico mais _ underline. 
         √â o mesmo que [0-9a-zA-Z_].
    \W - N√ÉO-ALFANUM√âRICO. Corresponde √† qualquer caractere n√£o alfanum√©rico mais _ underline. 
         √â o mesmo que [^0-9a-zA-Z_].
    \s - ESPA√áO. Corresponde √† um caractere de espa√ßo, tab e quebra de linha.
    \S - N√ÉO-ESPA√áO. Corresponde √† qualquer caractere que n√£o seja espa√ßo, tab ou quebra de linha.
    \n - ENTER. Corresponde √† quebra de linha.
    \t - TAB. Corresponde √† tab.
    \0 - NULL. Corresponde √† null.
    \p{x} - UNICODE. Corresponde √† um caractere unicode cuja propriedade passada em "x" seja verdadeira. 
            Requer que a flag "u" seja utilizada.
    \P{x} - N√ÉO-UNICODE. Corresponde ao oposto de \p{x}.
    [^] - Corresponde √† qualquer caractere, incluindo quebra de linha (diferente do .).
*/


/*QUANTIFICADORES:
    ? - O d√≠gito anterior Pode aparecer 0 vez ou 1 vez, retorna true ou false.
    ?= - Retorna true apenas se ap√≥s a string contem o padr√£o. Ex: /A(?=B)/ encontra A apenas se for seguido por B
    ?! - Nega, Retorna true apenas se ap√≥s a string n√£o contem o padr√£o. Ex: /A(?!B)/ encontra A apenas se ele n√£o for seguido B
    ?<= - Se antes da string contem o padr√£o, retorna true. Ex: /(?<=A)B/ antes da letra B contem a letra A
    ?<= - Nega, Se antes da string n√£o contem o padr√£o, retorna true. Ex: /(?<!A)B/ antes da letra B contem a letra A
    * - Pode aparecer 0 vez ou mais que 1 vez, ou seja, DEVE aparecer V√ÅRIAS vezes. 
    + - Pode aparecer no m√≠nimo 1 vez.
    - - Delimitador
    | - OPERADOR OR. Pesquisa correspond√™ncia em um ou outro padr√£o. Ex: /agua|suco/
    {n} - Para um padr√£o apare√ßa especificamente ‚Äún‚Äù vezes, passamos o n√∫mero de 
          vezes (n) entre chaves, ap√≥s alguma declara√ß√£o. Ex.: \d{5}\ 
    {n,} - Para que o padr√£o apare√ßa no m√≠nimo ‚Äún‚Äù vezes. Ex: \[A-Za-z]{4,}\
    {n,m} - Para que o padr√£o apare√ßa no m√≠nimo ‚Äún‚Äù e no m√°ximo ‚Äúm‚Äù vezes. Ex.: \[a-z0-9_-]{3,16}\

obs.: Quantifiers s√£o gananciosos!: ‚ÄúVou selecionar tudo o corresponder √† essa express√£o,
      at√© encontrar algo que n√£o responda, a√≠ eu paro!‚Äù
*/
